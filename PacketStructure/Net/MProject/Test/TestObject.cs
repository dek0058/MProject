// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MProject.Test
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct TestObject : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static TestObject GetRootAsTestObject(ByteBuffer _bb) { return GetRootAsTestObject(_bb, new TestObject()); }
  public static TestObject GetRootAsTestObject(ByteBuffer _bb, TestObject obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public TestObject __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Id { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public MProject.Core.Transform? Transform { get { int o = __p.__offset(6); return o != 0 ? (MProject.Core.Transform?)(new MProject.Core.Transform()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartTestObject(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddId(FlatBufferBuilder builder, int id) { builder.AddInt(0, id, 0); }
  public static void AddTransform(FlatBufferBuilder builder, Offset<MProject.Core.Transform> transformOffset) { builder.AddStruct(1, transformOffset.Value, 0); }
  public static Offset<MProject.Test.TestObject> EndTestObject(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MProject.Test.TestObject>(o);
  }
}


}
