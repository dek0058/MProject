// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace MProject.Test
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct BasePacket : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static BasePacket GetRootAsBasePacket(ByteBuffer _bb) { return GetRootAsBasePacket(_bb, new BasePacket()); }
  public static BasePacket GetRootAsBasePacket(ByteBuffer _bb, BasePacket obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BasePacket __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MProject.Core.Header? Header { get { int o = __p.__offset(4); return o != 0 ? (MProject.Core.Header?)(new MProject.Core.Header()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartBasePacket(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddHeader(FlatBufferBuilder builder, Offset<MProject.Core.Header> headerOffset) { builder.AddStruct(0, headerOffset.Value, 0); }
  public static Offset<MProject.Test.BasePacket> EndBasePacket(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<MProject.Test.BasePacket>(o);
  }
}


}
