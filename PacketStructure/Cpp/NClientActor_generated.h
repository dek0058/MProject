// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NCLIENTACTOR_MPROJECT_PACKET_H_
#define FLATBUFFERS_GENERATED_NCLIENTACTOR_MPROJECT_PACKET_H_

#include "flatbuffers/flatbuffers.h"

#include "Player_generated.h"
#include "Actor_generated.h"
#include "Core_generated.h"

namespace MProject {
namespace Packet {

struct NC2S_MoveActorInWorld;
struct NC2S_MoveActorInWorldBuilder;

struct NS2C_MoveActorInWorld;
struct NS2C_MoveActorInWorldBuilder;

struct NC2S_MoveActorInWorld FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NC2S_MoveActorInWorldBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WORLD_KEY = 4,
    VT_ACTORS = 6
  };
  uint32_t world_key() const {
    return GetField<uint32_t>(VT_WORLD_KEY, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>> *actors() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>> *>(VT_ACTORS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_WORLD_KEY, 4) &&
           VerifyOffset(verifier, VT_ACTORS) &&
           verifier.VerifyVector(actors()) &&
           verifier.VerifyVectorOfTables(actors()) &&
           verifier.EndTable();
  }
};

struct NC2S_MoveActorInWorldBuilder {
  typedef NC2S_MoveActorInWorld Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_world_key(uint32_t world_key) {
    fbb_.AddElement<uint32_t>(NC2S_MoveActorInWorld::VT_WORLD_KEY, world_key, 0);
  }
  void add_actors(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>>> actors) {
    fbb_.AddOffset(NC2S_MoveActorInWorld::VT_ACTORS, actors);
  }
  explicit NC2S_MoveActorInWorldBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NC2S_MoveActorInWorld> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NC2S_MoveActorInWorld>(end);
    return o;
  }
};

inline flatbuffers::Offset<NC2S_MoveActorInWorld> CreateNC2S_MoveActorInWorld(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t world_key = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>>> actors = 0) {
  NC2S_MoveActorInWorldBuilder builder_(_fbb);
  builder_.add_actors(actors);
  builder_.add_world_key(world_key);
  return builder_.Finish();
}

inline flatbuffers::Offset<NC2S_MoveActorInWorld> CreateNC2S_MoveActorInWorldDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t world_key = 0,
    const std::vector<flatbuffers::Offset<MProject::Packet::Actor>> *actors = nullptr) {
  auto actors__ = actors ? _fbb.CreateVector<flatbuffers::Offset<MProject::Packet::Actor>>(*actors) : 0;
  return MProject::Packet::CreateNC2S_MoveActorInWorld(
      _fbb,
      world_key,
      actors__);
}

struct NS2C_MoveActorInWorld FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NS2C_MoveActorInWorldBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WORLD_KEY = 4,
    VT_ACTORS = 6
  };
  uint32_t world_key() const {
    return GetField<uint32_t>(VT_WORLD_KEY, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>> *actors() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>> *>(VT_ACTORS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_WORLD_KEY, 4) &&
           VerifyOffset(verifier, VT_ACTORS) &&
           verifier.VerifyVector(actors()) &&
           verifier.VerifyVectorOfTables(actors()) &&
           verifier.EndTable();
  }
};

struct NS2C_MoveActorInWorldBuilder {
  typedef NS2C_MoveActorInWorld Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_world_key(uint32_t world_key) {
    fbb_.AddElement<uint32_t>(NS2C_MoveActorInWorld::VT_WORLD_KEY, world_key, 0);
  }
  void add_actors(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>>> actors) {
    fbb_.AddOffset(NS2C_MoveActorInWorld::VT_ACTORS, actors);
  }
  explicit NS2C_MoveActorInWorldBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NS2C_MoveActorInWorld> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NS2C_MoveActorInWorld>(end);
    return o;
  }
};

inline flatbuffers::Offset<NS2C_MoveActorInWorld> CreateNS2C_MoveActorInWorld(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t world_key = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>>> actors = 0) {
  NS2C_MoveActorInWorldBuilder builder_(_fbb);
  builder_.add_actors(actors);
  builder_.add_world_key(world_key);
  return builder_.Finish();
}

inline flatbuffers::Offset<NS2C_MoveActorInWorld> CreateNS2C_MoveActorInWorldDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t world_key = 0,
    const std::vector<flatbuffers::Offset<MProject::Packet::Actor>> *actors = nullptr) {
  auto actors__ = actors ? _fbb.CreateVector<flatbuffers::Offset<MProject::Packet::Actor>>(*actors) : 0;
  return MProject::Packet::CreateNS2C_MoveActorInWorld(
      _fbb,
      world_key,
      actors__);
}

}  // namespace Packet
}  // namespace MProject

#endif  // FLATBUFFERS_GENERATED_NCLIENTACTOR_MPROJECT_PACKET_H_
