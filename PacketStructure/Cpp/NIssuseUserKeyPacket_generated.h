// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NISSUSEUSERKEYPACKET_MPROJECT_PACKET_H_
#define FLATBUFFERS_GENERATED_NISSUSEUSERKEYPACKET_MPROJECT_PACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace MProject {
namespace Packet {

struct NIssuseUserKeyPacket;
struct NIssuseUserKeyPacketBuilder;

struct NIssuseUserKeyPacket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NIssuseUserKeyPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_KEY = 4
  };
  uint32_t key() const {
    return GetField<uint32_t>(VT_KEY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_KEY, 4) &&
           verifier.EndTable();
  }
};

struct NIssuseUserKeyPacketBuilder {
  typedef NIssuseUserKeyPacket Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_key(uint32_t key) {
    fbb_.AddElement<uint32_t>(NIssuseUserKeyPacket::VT_KEY, key, 0);
  }
  explicit NIssuseUserKeyPacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NIssuseUserKeyPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NIssuseUserKeyPacket>(end);
    return o;
  }
};

inline flatbuffers::Offset<NIssuseUserKeyPacket> CreateNIssuseUserKeyPacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t key = 0) {
  NIssuseUserKeyPacketBuilder builder_(_fbb);
  builder_.add_key(key);
  return builder_.Finish();
}

inline const MProject::Packet::NIssuseUserKeyPacket *GetNIssuseUserKeyPacket(const void *buf) {
  return flatbuffers::GetRoot<MProject::Packet::NIssuseUserKeyPacket>(buf);
}

inline const MProject::Packet::NIssuseUserKeyPacket *GetSizePrefixedNIssuseUserKeyPacket(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MProject::Packet::NIssuseUserKeyPacket>(buf);
}

inline bool VerifyNIssuseUserKeyPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MProject::Packet::NIssuseUserKeyPacket>(nullptr);
}

inline bool VerifySizePrefixedNIssuseUserKeyPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MProject::Packet::NIssuseUserKeyPacket>(nullptr);
}

inline void FinishNIssuseUserKeyPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MProject::Packet::NIssuseUserKeyPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedNIssuseUserKeyPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MProject::Packet::NIssuseUserKeyPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Packet
}  // namespace MProject

#endif  // FLATBUFFERS_GENERATED_NISSUSEUSERKEYPACKET_MPROJECT_PACKET_H_
