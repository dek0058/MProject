// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NCLIENTWORLD_MPROJECT_PACKET_H_
#define FLATBUFFERS_GENERATED_NCLIENTWORLD_MPROJECT_PACKET_H_

#include "flatbuffers/flatbuffers.h"

#include "Actor_generated.h"
#include "Player_generated.h"
#include "Core_generated.h"

namespace MProject {
namespace Packet {

struct NC2S_JoinWorld;
struct NC2S_JoinWorldBuilder;

struct NS2C_JoinWorld;
struct NS2C_JoinWorldBuilder;

struct NC2S_LeftWorld;
struct NC2S_LeftWorldBuilder;

struct NS2C_LeftWorld;
struct NS2C_LeftWorldBuilder;

struct NS2C_JoinUserInWorld;
struct NS2C_JoinUserInWorldBuilder;

struct NS2C_LeftUserInWorld;
struct NS2C_LeftUserInWorldBuilder;

struct NC2S_JoinWorld FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NC2S_JoinWorldBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct NC2S_JoinWorldBuilder {
  typedef NC2S_JoinWorld Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit NC2S_JoinWorldBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NC2S_JoinWorld> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NC2S_JoinWorld>(end);
    return o;
  }
};

inline flatbuffers::Offset<NC2S_JoinWorld> CreateNC2S_JoinWorld(
    flatbuffers::FlatBufferBuilder &_fbb) {
  NC2S_JoinWorldBuilder builder_(_fbb);
  return builder_.Finish();
}

struct NS2C_JoinWorld FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NS2C_JoinWorldBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WORLD_KEY = 4
  };
  uint32_t world_key() const {
    return GetField<uint32_t>(VT_WORLD_KEY, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_WORLD_KEY, 4) &&
           verifier.EndTable();
  }
};

struct NS2C_JoinWorldBuilder {
  typedef NS2C_JoinWorld Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_world_key(uint32_t world_key) {
    fbb_.AddElement<uint32_t>(NS2C_JoinWorld::VT_WORLD_KEY, world_key, 0);
  }
  explicit NS2C_JoinWorldBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NS2C_JoinWorld> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NS2C_JoinWorld>(end);
    return o;
  }
};

inline flatbuffers::Offset<NS2C_JoinWorld> CreateNS2C_JoinWorld(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t world_key = 0) {
  NS2C_JoinWorldBuilder builder_(_fbb);
  builder_.add_world_key(world_key);
  return builder_.Finish();
}

struct NC2S_LeftWorld FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NC2S_LeftWorldBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct NC2S_LeftWorldBuilder {
  typedef NC2S_LeftWorld Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit NC2S_LeftWorldBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NC2S_LeftWorld> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NC2S_LeftWorld>(end);
    return o;
  }
};

inline flatbuffers::Offset<NC2S_LeftWorld> CreateNC2S_LeftWorld(
    flatbuffers::FlatBufferBuilder &_fbb) {
  NC2S_LeftWorldBuilder builder_(_fbb);
  return builder_.Finish();
}

struct NS2C_LeftWorld FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NS2C_LeftWorldBuilder Builder;
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
};

struct NS2C_LeftWorldBuilder {
  typedef NS2C_LeftWorld Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit NS2C_LeftWorldBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NS2C_LeftWorld> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NS2C_LeftWorld>(end);
    return o;
  }
};

inline flatbuffers::Offset<NS2C_LeftWorld> CreateNS2C_LeftWorld(
    flatbuffers::FlatBufferBuilder &_fbb) {
  NS2C_LeftWorldBuilder builder_(_fbb);
  return builder_.Finish();
}

struct NS2C_JoinUserInWorld FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NS2C_JoinUserInWorldBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WORLD_KEY = 4,
    VT_PLAYERS = 6,
    VT_ACTORS = 8
  };
  uint32_t world_key() const {
    return GetField<uint32_t>(VT_WORLD_KEY, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::GPC>> *players() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::GPC>> *>(VT_PLAYERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>> *actors() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>> *>(VT_ACTORS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_WORLD_KEY, 4) &&
           VerifyOffset(verifier, VT_PLAYERS) &&
           verifier.VerifyVector(players()) &&
           verifier.VerifyVectorOfTables(players()) &&
           VerifyOffset(verifier, VT_ACTORS) &&
           verifier.VerifyVector(actors()) &&
           verifier.VerifyVectorOfTables(actors()) &&
           verifier.EndTable();
  }
};

struct NS2C_JoinUserInWorldBuilder {
  typedef NS2C_JoinUserInWorld Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_world_key(uint32_t world_key) {
    fbb_.AddElement<uint32_t>(NS2C_JoinUserInWorld::VT_WORLD_KEY, world_key, 0);
  }
  void add_players(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::GPC>>> players) {
    fbb_.AddOffset(NS2C_JoinUserInWorld::VT_PLAYERS, players);
  }
  void add_actors(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>>> actors) {
    fbb_.AddOffset(NS2C_JoinUserInWorld::VT_ACTORS, actors);
  }
  explicit NS2C_JoinUserInWorldBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NS2C_JoinUserInWorld> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NS2C_JoinUserInWorld>(end);
    return o;
  }
};

inline flatbuffers::Offset<NS2C_JoinUserInWorld> CreateNS2C_JoinUserInWorld(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t world_key = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::GPC>>> players = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>>> actors = 0) {
  NS2C_JoinUserInWorldBuilder builder_(_fbb);
  builder_.add_actors(actors);
  builder_.add_players(players);
  builder_.add_world_key(world_key);
  return builder_.Finish();
}

inline flatbuffers::Offset<NS2C_JoinUserInWorld> CreateNS2C_JoinUserInWorldDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t world_key = 0,
    const std::vector<flatbuffers::Offset<MProject::Packet::GPC>> *players = nullptr,
    const std::vector<flatbuffers::Offset<MProject::Packet::Actor>> *actors = nullptr) {
  auto players__ = players ? _fbb.CreateVector<flatbuffers::Offset<MProject::Packet::GPC>>(*players) : 0;
  auto actors__ = actors ? _fbb.CreateVector<flatbuffers::Offset<MProject::Packet::Actor>>(*actors) : 0;
  return MProject::Packet::CreateNS2C_JoinUserInWorld(
      _fbb,
      world_key,
      players__,
      actors__);
}

struct NS2C_LeftUserInWorld FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NS2C_LeftUserInWorldBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WORLD_KEY = 4,
    VT_PLAYERS = 6,
    VT_ACTORS = 8
  };
  uint32_t world_key() const {
    return GetField<uint32_t>(VT_WORLD_KEY, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::GPC>> *players() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::GPC>> *>(VT_PLAYERS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>> *actors() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>> *>(VT_ACTORS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_WORLD_KEY, 4) &&
           VerifyOffset(verifier, VT_PLAYERS) &&
           verifier.VerifyVector(players()) &&
           verifier.VerifyVectorOfTables(players()) &&
           VerifyOffset(verifier, VT_ACTORS) &&
           verifier.VerifyVector(actors()) &&
           verifier.VerifyVectorOfTables(actors()) &&
           verifier.EndTable();
  }
};

struct NS2C_LeftUserInWorldBuilder {
  typedef NS2C_LeftUserInWorld Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_world_key(uint32_t world_key) {
    fbb_.AddElement<uint32_t>(NS2C_LeftUserInWorld::VT_WORLD_KEY, world_key, 0);
  }
  void add_players(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::GPC>>> players) {
    fbb_.AddOffset(NS2C_LeftUserInWorld::VT_PLAYERS, players);
  }
  void add_actors(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>>> actors) {
    fbb_.AddOffset(NS2C_LeftUserInWorld::VT_ACTORS, actors);
  }
  explicit NS2C_LeftUserInWorldBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NS2C_LeftUserInWorld> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NS2C_LeftUserInWorld>(end);
    return o;
  }
};

inline flatbuffers::Offset<NS2C_LeftUserInWorld> CreateNS2C_LeftUserInWorld(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t world_key = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::GPC>>> players = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MProject::Packet::Actor>>> actors = 0) {
  NS2C_LeftUserInWorldBuilder builder_(_fbb);
  builder_.add_actors(actors);
  builder_.add_players(players);
  builder_.add_world_key(world_key);
  return builder_.Finish();
}

inline flatbuffers::Offset<NS2C_LeftUserInWorld> CreateNS2C_LeftUserInWorldDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t world_key = 0,
    const std::vector<flatbuffers::Offset<MProject::Packet::GPC>> *players = nullptr,
    const std::vector<flatbuffers::Offset<MProject::Packet::Actor>> *actors = nullptr) {
  auto players__ = players ? _fbb.CreateVector<flatbuffers::Offset<MProject::Packet::GPC>>(*players) : 0;
  auto actors__ = actors ? _fbb.CreateVector<flatbuffers::Offset<MProject::Packet::Actor>>(*actors) : 0;
  return MProject::Packet::CreateNS2C_LeftUserInWorld(
      _fbb,
      world_key,
      players__,
      actors__);
}

}  // namespace Packet
}  // namespace MProject

#endif  // FLATBUFFERS_GENERATED_NCLIENTWORLD_MPROJECT_PACKET_H_
