// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_MPROJECT_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_MPROJECT_TEST_H_

#include "flatbuffers/flatbuffers.h"

#include "Core_generated.h"

namespace MProject {
namespace Test {

struct BasePacket;
struct BasePacketBuilder;

struct BasePacket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BasePacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HEADER = 4
  };
  const MProject::Core::Header *header() const {
    return GetStruct<const MProject::Core::Header *>(VT_HEADER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<MProject::Core::Header>(verifier, VT_HEADER, 4) &&
           verifier.EndTable();
  }
};

struct BasePacketBuilder {
  typedef BasePacket Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_header(const MProject::Core::Header *header) {
    fbb_.AddStruct(BasePacket::VT_HEADER, header);
  }
  explicit BasePacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<BasePacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BasePacket>(end);
    return o;
  }
};

inline flatbuffers::Offset<BasePacket> CreateBasePacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    const MProject::Core::Header *header = nullptr) {
  BasePacketBuilder builder_(_fbb);
  builder_.add_header(header);
  return builder_.Finish();
}

}  // namespace Test
}  // namespace MProject

#endif  // FLATBUFFERS_GENERATED_TEST_MPROJECT_TEST_H_
