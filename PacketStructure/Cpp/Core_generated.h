// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CORE_MPROJECT_PACKET_H_
#define FLATBUFFERS_GENERATED_CORE_MPROJECT_PACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace MProject {
namespace Packet {

struct FVector;
struct FVectorBuilder;

struct FQuaternion;
struct FQuaternionBuilder;

struct FTransform;
struct FTransformBuilder;

struct FVector FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FVectorBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_Z, 4) &&
           verifier.EndTable();
  }
};

struct FVectorBuilder {
  typedef FVector Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(FVector::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(FVector::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(FVector::VT_Z, z, 0.0f);
  }
  explicit FVectorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FVector> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FVector>(end);
    return o;
  }
};

inline flatbuffers::Offset<FVector> CreateFVector(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f) {
  FVectorBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct FQuaternion FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FQuaternionBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8,
    VT_W = 10
  };
  float x() const {
    return GetField<float>(VT_X, 0.0f);
  }
  float y() const {
    return GetField<float>(VT_Y, 0.0f);
  }
  float z() const {
    return GetField<float>(VT_Z, 0.0f);
  }
  float w() const {
    return GetField<float>(VT_W, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<float>(verifier, VT_X, 4) &&
           VerifyField<float>(verifier, VT_Y, 4) &&
           VerifyField<float>(verifier, VT_Z, 4) &&
           VerifyField<float>(verifier, VT_W, 4) &&
           verifier.EndTable();
  }
};

struct FQuaternionBuilder {
  typedef FQuaternion Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(float x) {
    fbb_.AddElement<float>(FQuaternion::VT_X, x, 0.0f);
  }
  void add_y(float y) {
    fbb_.AddElement<float>(FQuaternion::VT_Y, y, 0.0f);
  }
  void add_z(float z) {
    fbb_.AddElement<float>(FQuaternion::VT_Z, z, 0.0f);
  }
  void add_w(float w) {
    fbb_.AddElement<float>(FQuaternion::VT_W, w, 0.0f);
  }
  explicit FQuaternionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FQuaternion> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FQuaternion>(end);
    return o;
  }
};

inline flatbuffers::Offset<FQuaternion> CreateFQuaternion(
    flatbuffers::FlatBufferBuilder &_fbb,
    float x = 0.0f,
    float y = 0.0f,
    float z = 0.0f,
    float w = 0.0f) {
  FQuaternionBuilder builder_(_fbb);
  builder_.add_w(w);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

struct FTransform FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef FTransformBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_ROTATION = 6,
    VT_SCALE = 8
  };
  const MProject::Packet::FVector *position() const {
    return GetPointer<const MProject::Packet::FVector *>(VT_POSITION);
  }
  const MProject::Packet::FQuaternion *rotation() const {
    return GetPointer<const MProject::Packet::FQuaternion *>(VT_ROTATION);
  }
  const MProject::Packet::FVector *scale() const {
    return GetPointer<const MProject::Packet::FVector *>(VT_SCALE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_POSITION) &&
           verifier.VerifyTable(position()) &&
           VerifyOffset(verifier, VT_ROTATION) &&
           verifier.VerifyTable(rotation()) &&
           VerifyOffset(verifier, VT_SCALE) &&
           verifier.VerifyTable(scale()) &&
           verifier.EndTable();
  }
};

struct FTransformBuilder {
  typedef FTransform Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(flatbuffers::Offset<MProject::Packet::FVector> position) {
    fbb_.AddOffset(FTransform::VT_POSITION, position);
  }
  void add_rotation(flatbuffers::Offset<MProject::Packet::FQuaternion> rotation) {
    fbb_.AddOffset(FTransform::VT_ROTATION, rotation);
  }
  void add_scale(flatbuffers::Offset<MProject::Packet::FVector> scale) {
    fbb_.AddOffset(FTransform::VT_SCALE, scale);
  }
  explicit FTransformBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<FTransform> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FTransform>(end);
    return o;
  }
};

inline flatbuffers::Offset<FTransform> CreateFTransform(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<MProject::Packet::FVector> position = 0,
    flatbuffers::Offset<MProject::Packet::FQuaternion> rotation = 0,
    flatbuffers::Offset<MProject::Packet::FVector> scale = 0) {
  FTransformBuilder builder_(_fbb);
  builder_.add_scale(scale);
  builder_.add_rotation(rotation);
  builder_.add_position(position);
  return builder_.Finish();
}

}  // namespace Packet
}  // namespace MProject

#endif  // FLATBUFFERS_GENERATED_CORE_MPROJECT_PACKET_H_
