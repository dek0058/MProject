// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PACKETTAG_MPROJECT_PACKET_H_
#define FLATBUFFERS_GENERATED_PACKETTAG_MPROJECT_PACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace MProject {
namespace Packet {

struct FProtocol;

struct NProtocolMessage;
struct NProtocolMessageBuilder;

enum Tag : uint32_t {
  Tag_Create = 0,
  Tag_Test = 1,
  Tag_MIN = Tag_Create,
  Tag_MAX = Tag_Test
};

inline const Tag (&EnumValuesTag())[2] {
  static const Tag values[] = {
    Tag_Create,
    Tag_Test
  };
  return values;
}

inline const char * const *EnumNamesTag() {
  static const char * const names[3] = {
    "Create",
    "Test",
    nullptr
  };
  return names;
}

inline const char *EnumNameTag(Tag e) {
  if (flatbuffers::IsOutRange(e, Tag_Create, Tag_Test)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTag()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) FProtocol FLATBUFFERS_FINAL_CLASS {
 private:
  uint32_t tag_;
  uint8_t hash_code_[32];

 public:
  FProtocol()
      : tag_(0),
        hash_code_() {
  }
  FProtocol(uint32_t _tag)
      : tag_(flatbuffers::EndianScalar(_tag)),
        hash_code_() {
  }
  FProtocol(uint32_t _tag, flatbuffers::span<const uint8_t, 32> _hash_code)
      : tag_(flatbuffers::EndianScalar(_tag)) {
    flatbuffers::CastToArray(hash_code_).CopyFromSpan(_hash_code);
  }
  uint32_t tag() const {
    return flatbuffers::EndianScalar(tag_);
  }
  const flatbuffers::Array<uint8_t, 32> *hash_code() const {
    return &flatbuffers::CastToArray(hash_code_);
  }
};
FLATBUFFERS_STRUCT_END(FProtocol, 36);

struct NProtocolMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NProtocolMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROTOCOL = 4
  };
  const flatbuffers::Vector<const MProject::Packet::FProtocol *> *protocol() const {
    return GetPointer<const flatbuffers::Vector<const MProject::Packet::FProtocol *> *>(VT_PROTOCOL);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROTOCOL) &&
           verifier.VerifyVector(protocol()) &&
           verifier.EndTable();
  }
};

struct NProtocolMessageBuilder {
  typedef NProtocolMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_protocol(flatbuffers::Offset<flatbuffers::Vector<const MProject::Packet::FProtocol *>> protocol) {
    fbb_.AddOffset(NProtocolMessage::VT_PROTOCOL, protocol);
  }
  explicit NProtocolMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NProtocolMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NProtocolMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<NProtocolMessage> CreateNProtocolMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<const MProject::Packet::FProtocol *>> protocol = 0) {
  NProtocolMessageBuilder builder_(_fbb);
  builder_.add_protocol(protocol);
  return builder_.Finish();
}

inline flatbuffers::Offset<NProtocolMessage> CreateNProtocolMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<MProject::Packet::FProtocol> *protocol = nullptr) {
  auto protocol__ = protocol ? _fbb.CreateVectorOfStructs<MProject::Packet::FProtocol>(*protocol) : 0;
  return MProject::Packet::CreateNProtocolMessage(
      _fbb,
      protocol__);
}

inline const MProject::Packet::NProtocolMessage *GetNProtocolMessage(const void *buf) {
  return flatbuffers::GetRoot<MProject::Packet::NProtocolMessage>(buf);
}

inline const MProject::Packet::NProtocolMessage *GetSizePrefixedNProtocolMessage(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MProject::Packet::NProtocolMessage>(buf);
}

inline bool VerifyNProtocolMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MProject::Packet::NProtocolMessage>(nullptr);
}

inline bool VerifySizePrefixedNProtocolMessageBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MProject::Packet::NProtocolMessage>(nullptr);
}

inline void FinishNProtocolMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MProject::Packet::NProtocolMessage> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedNProtocolMessageBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MProject::Packet::NProtocolMessage> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Packet
}  // namespace MProject

#endif  // FLATBUFFERS_GENERATED_PACKETTAG_MPROJECT_PACKET_H_
