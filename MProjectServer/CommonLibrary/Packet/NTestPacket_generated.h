// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_NTESTPACKET_MPROJECT_PACKET_H_
#define FLATBUFFERS_GENERATED_NTESTPACKET_MPROJECT_PACKET_H_

#include "flatbuffers/flatbuffers.h"

namespace MProject {
namespace Packet {

struct NTestPacket;
struct NTestPacketBuilder;

struct NTestPacket FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef NTestPacketBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_X = 4,
    VT_Y = 6,
    VT_Z = 8
  };
  int32_t x() const {
    return GetField<int32_t>(VT_X, 0);
  }
  int32_t y() const {
    return GetField<int32_t>(VT_Y, 0);
  }
  int32_t z() const {
    return GetField<int32_t>(VT_Z, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_X, 4) &&
           VerifyField<int32_t>(verifier, VT_Y, 4) &&
           VerifyField<int32_t>(verifier, VT_Z, 4) &&
           verifier.EndTable();
  }
};

struct NTestPacketBuilder {
  typedef NTestPacket Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_x(int32_t x) {
    fbb_.AddElement<int32_t>(NTestPacket::VT_X, x, 0);
  }
  void add_y(int32_t y) {
    fbb_.AddElement<int32_t>(NTestPacket::VT_Y, y, 0);
  }
  void add_z(int32_t z) {
    fbb_.AddElement<int32_t>(NTestPacket::VT_Z, z, 0);
  }
  explicit NTestPacketBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<NTestPacket> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<NTestPacket>(end);
    return o;
  }
};

inline flatbuffers::Offset<NTestPacket> CreateNTestPacket(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t x = 0,
    int32_t y = 0,
    int32_t z = 0) {
  NTestPacketBuilder builder_(_fbb);
  builder_.add_z(z);
  builder_.add_y(y);
  builder_.add_x(x);
  return builder_.Finish();
}

inline const MProject::Packet::NTestPacket *GetNTestPacket(const void *buf) {
  return flatbuffers::GetRoot<MProject::Packet::NTestPacket>(buf);
}

inline const MProject::Packet::NTestPacket *GetSizePrefixedNTestPacket(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<MProject::Packet::NTestPacket>(buf);
}

inline bool VerifyNTestPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<MProject::Packet::NTestPacket>(nullptr);
}

inline bool VerifySizePrefixedNTestPacketBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<MProject::Packet::NTestPacket>(nullptr);
}

inline void FinishNTestPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MProject::Packet::NTestPacket> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedNTestPacketBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<MProject::Packet::NTestPacket> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Packet
}  // namespace MProject

#endif  // FLATBUFFERS_GENERATED_NTESTPACKET_MPROJECT_PACKET_H_
