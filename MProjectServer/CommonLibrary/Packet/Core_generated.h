// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CORE_MPROJECT_CORE_H_
#define FLATBUFFERS_GENERATED_CORE_MPROJECT_CORE_H_

#include "flatbuffers/flatbuffers.h"

namespace MProject {
namespace Core {

struct Vector;

struct Transform;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vector()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vector(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Transform FLATBUFFERS_FINAL_CLASS {
 private:
  MProject::Core::Vector position_;
  MProject::Core::Vector rotation_;
  MProject::Core::Vector scale_;

 public:
  Transform()
      : position_(),
        rotation_(),
        scale_() {
  }
  Transform(const MProject::Core::Vector &_position, const MProject::Core::Vector &_rotation, const MProject::Core::Vector &_scale)
      : position_(_position),
        rotation_(_rotation),
        scale_(_scale) {
  }
  const MProject::Core::Vector &position() const {
    return position_;
  }
  const MProject::Core::Vector &rotation() const {
    return rotation_;
  }
  const MProject::Core::Vector &scale() const {
    return scale_;
  }
};
FLATBUFFERS_STRUCT_END(Transform, 36);

}  // namespace Core
}  // namespace MProject

#endif  // FLATBUFFERS_GENERATED_CORE_MPROJECT_CORE_H_
