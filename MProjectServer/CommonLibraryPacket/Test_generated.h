// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEST_MPROJECT_TEST_H_
#define FLATBUFFERS_GENERATED_TEST_MPROJECT_TEST_H_

#include "flatbuffers/flatbuffers.h"

#include "Core_generated.h"

namespace MProject {
namespace Test {

struct TestObject;
struct TestObjectBuilder;

struct TestObject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TestObjectBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TRANSFORM = 6
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  const MProject::Core::Transform *transform() const {
    return GetStruct<const MProject::Core::Transform *>(VT_TRANSFORM);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<MProject::Core::Transform>(verifier, VT_TRANSFORM, 4) &&
           verifier.EndTable();
  }
};

struct TestObjectBuilder {
  typedef TestObject Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(TestObject::VT_ID, id, 0);
  }
  void add_transform(const MProject::Core::Transform *transform) {
    fbb_.AddStruct(TestObject::VT_TRANSFORM, transform);
  }
  explicit TestObjectBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TestObject> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TestObject>(end);
    return o;
  }
};

inline flatbuffers::Offset<TestObject> CreateTestObject(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    const MProject::Core::Transform *transform = nullptr) {
  TestObjectBuilder builder_(_fbb);
  builder_.add_transform(transform);
  builder_.add_id(id);
  return builder_.Finish();
}

}  // namespace Test
}  // namespace MProject

#endif  // FLATBUFFERS_GENERATED_TEST_MPROJECT_TEST_H_
