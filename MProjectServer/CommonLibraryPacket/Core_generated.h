// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CORE_MPROJECT_CORE_H_
#define FLATBUFFERS_GENERATED_CORE_MPROJECT_CORE_H_

#include "flatbuffers/flatbuffers.h"

namespace MProject {
namespace Core {

struct Header;
struct HeaderBuilder;

struct Vector3;

struct Transform;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vector3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vector3(float _x, float _y, float _z)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)),
        z_(flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vector3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Transform FLATBUFFERS_FINAL_CLASS {
 private:
  MProject::Core::Vector3 position_;
  MProject::Core::Vector3 rotation_;
  MProject::Core::Vector3 scale_;

 public:
  Transform()
      : position_(),
        rotation_(),
        scale_() {
  }
  Transform(const MProject::Core::Vector3 &_position, const MProject::Core::Vector3 &_rotation, const MProject::Core::Vector3 &_scale)
      : position_(_position),
        rotation_(_rotation),
        scale_(_scale) {
  }
  const MProject::Core::Vector3 &position() const {
    return position_;
  }
  const MProject::Core::Vector3 &rotation() const {
    return rotation_;
  }
  const MProject::Core::Vector3 &scale() const {
    return scale_;
  }
};
FLATBUFFERS_STRUCT_END(Transform, 36);

struct Header FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef HeaderBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_HASH_CODE = 4,
    VT_LENGTH = 6,
    VT_TAG = 8
  };
  const flatbuffers::Vector<uint8_t> *hash_code() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_HASH_CODE);
  }
  uint32_t length() const {
    return GetField<uint32_t>(VT_LENGTH, 0);
  }
  uint32_t tag() const {
    return GetField<uint32_t>(VT_TAG, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HASH_CODE) &&
           verifier.VerifyVector(hash_code()) &&
           VerifyField<uint32_t>(verifier, VT_LENGTH, 4) &&
           VerifyField<uint32_t>(verifier, VT_TAG, 4) &&
           verifier.EndTable();
  }
};

struct HeaderBuilder {
  typedef Header Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hash_code(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash_code) {
    fbb_.AddOffset(Header::VT_HASH_CODE, hash_code);
  }
  void add_length(uint32_t length) {
    fbb_.AddElement<uint32_t>(Header::VT_LENGTH, length, 0);
  }
  void add_tag(uint32_t tag) {
    fbb_.AddElement<uint32_t>(Header::VT_TAG, tag, 0);
  }
  explicit HeaderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Header> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Header>(end);
    return o;
  }
};

inline flatbuffers::Offset<Header> CreateHeader(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash_code = 0,
    uint32_t length = 0,
    uint32_t tag = 0) {
  HeaderBuilder builder_(_fbb);
  builder_.add_tag(tag);
  builder_.add_length(length);
  builder_.add_hash_code(hash_code);
  return builder_.Finish();
}

inline flatbuffers::Offset<Header> CreateHeaderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *hash_code = nullptr,
    uint32_t length = 0,
    uint32_t tag = 0) {
  auto hash_code__ = hash_code ? _fbb.CreateVector<uint8_t>(*hash_code) : 0;
  return MProject::Core::CreateHeader(
      _fbb,
      hash_code__,
      length,
      tag);
}

}  // namespace Core
}  // namespace MProject

#endif  // FLATBUFFERS_GENERATED_CORE_MPROJECT_CORE_H_
